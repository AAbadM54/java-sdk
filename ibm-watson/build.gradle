plugins {
    id 'ru.vyarus.animalsniffer' version '1.3.0'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

defaultTasks 'clean'

apply from: '../utils.gradle'
import org.apache.tools.ant.filters.*

apply plugin: 'java'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'

project.tasks.assemble.dependsOn project.tasks.shadowJar

shadowJar {
   classifier = 'jar-with-dependencies'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

repositories {
    maven { url = "http://repo.maven.apache.org/maven2" }
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

signing {
    sign configurations.archives
}

signArchives {
    onlyIf { Task task ->
        def shouldExec = false
        for (myArg in project.gradle.startParameter.taskRequests[0].args) {
            if (myArg.toLowerCase().contains('signjars') || myArg.toLowerCase().contains('uploadarchives')) {
                shouldExec = true
            }
        }
        return shouldExec
    }
}

checkstyleTest {
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.file('checkstyle.xml')
    ignoreFailures = false
}

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

dependencies {
    compile project(':assistant')
    compile project(':conversation')
    compile project(':core')
    compile project(':discovery')
    compile project(':language-translator')
    compile project(':natural-language-classifier')
    compile project(':natural-language-understanding')
    compile project(':personality-insights')
    compile project(':speech-to-text')
    compile project(':text-to-speech')
    compile project(':tone-analyzer')
    compile project(':visual-recognition')

    signature 'org.codehaus.mojo.signature:java17:1.0@signature'

}

processResources {
    filter ReplaceTokens, tokens: [
            "pom.version": project.version,
            "build.date" : getDate()
    ]
}

task writeNewPom {
    doLast {
        pom {
            project {
                name 'IBM Watson Java SDK'
                packaging 'jar'
                description 'Java client library to use the IBM Watson APIs'
                url 'https://cloud.ibm.com/developer/watson/dashboard'

                scm {
                    connection 'scm:git:git@github.com:watson-developer-cloud/java-sdk.git'
                    developerConnection 'scm:git:git@github.com:watson-developer-cloud/java-sdk.git'
                    url 'https://github.com/watson-developer-cloud/java-sdk'
                }

                issueManagement {
                    system 'GitHub'
                    url 'https://github.com/watson-developer-cloud/java-sdk/issues'

                }

                ciManagement {
                    system 'Travis CI'
                    url 'https://travis-ci.org/watson-developer-cloud/java-sdk'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'german'
                        name 'German Attanasio'
                        email 'germanatt@us.ibm.com'
                    }
                    developer {
                        id 'logan'
                        name 'Logan Patino'
                        email 'loganpatino10@ibm.com'
                    }
                }
            }
        }.writeTo("$buildDir/poms/pom-default.xml")
    }
}

install.finalizedBy(writeNewPom)
