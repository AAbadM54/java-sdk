plugins {
    id 'ru.vyarus.animalsniffer' version '1.3.0'
}

defaultTasks 'clean'

apply from: '../utils.gradle'
import org.apache.tools.ant.filters.*

apply plugin: 'java'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

repositories {
    maven { url = "http://repo.maven.apache.org/maven2" }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

signArchives {
    onlyIf { Task task ->
        def shouldExec = false
        for (myArg in project.gradle.startParameter.taskRequests[0].args) {
            if (myArg.toLowerCase().contains('signjars') || myArg.toLowerCase().contains('uploadarchives')) {
                shouldExec = true
            }
        }
        return shouldExec
    }
}


checkstyle {
    configFile = rootProject.file('checkstyle.xml')
    ignoreFailures = false
}

  task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
  }

  configurations {
    tests
  }

  artifacts {
    tests testJar
  }

dependencies {
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.11.0'
    compile group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '3.11.0'
    compile group: 'com.squareup.okhttp3', name: 'okhttp-urlconnection', version: '3.11.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.glassfish.jersey.bundles.repackaged', name: 'jersey-jsr166e', version: '2.25.1'
    testCompile group: 'simple-jndi', name: 'simple-jndi', version: '0.11.4.1'

    signature 'org.codehaus.mojo.signature:java17:1.0@signature'

}

processResources {
    filter ReplaceTokens, tokens: [
            "pom.version": project.version,
            "build.date" : getDate()
    ]
}
